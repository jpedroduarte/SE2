/*
 * main.c
 *
 *  Created on: 07/06/2016
 *      Author: Red
 */

#include "LCD.h"
#include "RTC.h"
#include "KBD.h"
#include <stdio.h>
#include <string.h>


const int timeToPutCode = 25000;
int ledOn = 5000;
int timeAux = 0;
int ledTicks = 0;
int ledTime = 0;
bool lcdDataTimeOn = false;
int lastTickTime = 0;
int lastTickTimeFor5s =0;

int lastTickTimeFor25s =0;
int time25s = 0;
int time5sAux = 0;
uint8_t time_len=6, date_len=11;
struct tm dateTime;
/*todo
void * sectorSettings =(void *) (8192 * 12); // pq uso o sector 12
void * sectorRegister =(void *) ( 8192 * 13); // pq uso o sector 13
*/
const int asterisk = 10;
const int cardinal = 11;
const int doubleKey = 12;
uint32_t layout[]=	{0,1,2,3,4,5,6,7,8,9,10,11,12};
/*todo
char flash_Settings_Buffer[512];
char flashCopy [8192];
void * flash_offset;
void * history_offset;
*/

int pmain(){

	//
	//Init
	//


	/*todo
	if(!verifyFlash())
			resetFlash();
		//Copy sector 13 to Buffer
		//updateFlashBuffer();
	*/
	KBD_init(layout);
	LED_init(8, 0);
	//TMR0_Init(1000);
	SPI_Init(8,9);
	LCD_Init();
	//char time[time_len], date[date_len];
	//itot(time, 13, 50);
	//itod(date, 17, 1, 2016);
	int secs = 00, mins = 15, hours = 22, wdays = 1,
			days = 17, mons = 01, years = 2016, yday = 01;
	dateTime.tm_sec = secs;
	dateTime.tm_min = mins;
	dateTime.tm_hour = hours;
	dateTime.tm_wday = wdays;
	dateTime.tm_mday = days;
	dateTime.tm_mon = mons;
	dateTime.tm_year = years;
	dateTime.tm_yday = yday;
	RTC_Init(&dateTime);
	LCD_BL_State(0); //Apagar LCD light

	//uint32_t ptr[4]={10,11,12,13};

	//FLASH_EraseSectors(13,13);
	//FLASH_WriteBlock(sectorRegister, &ptr ,4*1024);

	LCD_TurnOffDisplay();

	//
	//Create tasks
	//

	xTaskCreate(mainTask, "mainTask", configMINIMAL_STACK_SIZE, NULL, 0 , NULL );
	xTaskCreate(UserModeTask, "UserModeTask", configMINIMAL_STACK_SIZE, NULL, 0 , NULL );
	xTaskCreate(AdminModeTask, "AdminModeTask", configMINIMAL_STACK_SIZE, NULL, 0 , NULL );

	xTaskCreate(KBD_GetKey, "KBD_Task", configMINIMAL_STACK_SIZE, NULL, 0 , NULL );
#define KBD_queue_size 1
	KBD_queue= xQueueCreate(KBD_queue_size,sizeof(uint32_t)*KBD_queue_size);

#define LCD_queue_size 1
	xTaskCreate(LCD_Display, "LCD_Task", configMINIMAL_STACK_SIZE, NULL, 0 , NULL );
	LCD_queue= xQueueCreate(1,sizeof(uint32_t));

	return 0;
}


