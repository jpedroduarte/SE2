#include "Ethernet.h"

void Ethernet_init(){

	//set PCENET in PCONP
	LPC_SC->PCONP |=PCONP_PCENET_MASK;

	// clock config

	//PINSEL config
	#define GPIO_PORT 1
	#define GPIO_FUNC 1
	#define OUTPUT 1
	#define MASK 0x3C713
	#define INIT_VALUE 0
	GPIO_configDigitalGeneric(GPIO_PORT, GPIO_FUNC, OUTPUT, MASK, INIT_VALUE);

	//PINMODE config
	#define PINMODE_FUNC ?
	#define OPEN_DRAIN ?
	//GPIO_configAnalogGeneric(GPIO_PORT, PINMODE_FUNC, OPEN_DRAIN, MASK);

	//Initialization
#define MAC_SOFT_RESET 0x8000
	LPC_EMAC->MAC1= (LPC_EMAC->MAC1 & ~0x8000) | 0x8000;


}

/*
void WriteToPHY (int reg, int writeval){

	unsigned int loop;
	// Set up address to access in MII Mgmt Address Register
	LPC_EMAC->MADR = PHY_DEF_ADR | reg;
	// Write value into MII Mgmt Write Data Register
	LPC_EMAC->MWTD = writeval;
	// Loop write to PHY completes
	for (loop = 0; loop < MII_WR_TOUT; loop++)
		if ((LPC_EMAC->MIND & MIND_BUSY) == 0)
			break;
}
*/
/*
unsigned short ReadFromPHY (unsigned char reg){

	unsigned int loop;
	// Set up address to access in MII Mgmt Address Register
	LPC_EMAC->MADR = PHY_DEF_ADR | reg;
	// Trigger a PHY read via MII Mgmt Command Register
	LPC_EMAC->MCMD = MCMD_READ;
	// Loop read from PHY completes
	for (loop = 0; loop < MII_RD_TOUT; loop++)
		if ((LPC_EMAC->MIND & MIND_BUSY) == 0)
			break;
	LPC_EMAC->MCMD = 0; // Cancel read
	// Returned value is in MII Mgmt Read Data Register
	return (LPC_EMAC->MRDD);
}
*/
